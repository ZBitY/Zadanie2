name: Build and Publish Docker Image

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/weather-app
  CACHE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/weather-app-cache

jobs:
  build-and-push:
    name: Build, Scan and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub (cache)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image with cache and push (but don't yet push to GHCR)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          platforms: linux/amd64
          tags: weather-app:temp
          cache-from: type=registry,ref=${{ env.CACHE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.CACHE_NAME }}:cache,mode=max

      - name: Scan image for vulnerabilities using Trivy
        uses: aquasecurity/trivy-action@v0.14.0
        with:
          image-ref: weather-app:temp
          format: table
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: 1

      - name: Build and push final multi-arch image to GHCR
        if: success()  # Only runs if Trivy scan passed
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.CACHE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.CACHE_NAME }}:cache,mode=max
